# -*- coding: utf-8 -*-

from random import randint
from fortune.anim import animate
from fortune import VoronoiDiagram

if __name__ == '__main__':
	bbox = [-5,35,-5,35]
	#pts = [(2, 13, 'a'), (11, 10, 'b'), (7, 9, 'c'), (12, 7, 'd'), (8, 1, 'e'), (6, 0, 'f')]
	#pts = [(3, 8, 'a'), (10, 7, 'b'), (10, 0, 'c'), (8, 7, 'd'), (0, 7, 'e'), (3, 5, 'f')]
	selected_runs = [
		[(4, 12, 'a'), (8, 11, 'b'), (11, 10, 'c'), (5, 6.5, 'd'), (9, 5.5, 'e'), (12.5, 4.5, 'f')],
		[(2, 13, 'a'), (11, 10, 'b'), (7, 9, 'c'), (12, 7, 'd'), (8, 1, 'e'), (6, 0, 'f')],
		[(3, 3, 'a'), (14, 9, 'b'), (3, 7, 'c'), (12, 3, 'd'), (1, 4, 'e'), (14, 0, 'f')],
		[(4, 12, 'a'), (3, 3, 'b'), (11, 6, 'c')],
	]
	
	# Degenerate Cases:
	degenerate_runs = [
		# Duplicate
		[(9, 11), (9, 11), (8, 4), (10, 11), (1, 0), (14, 9), (3, 1), (15, 14), (3, 8)],
		# Two collinear
		[(8, 11, 'a'), (11, 9, 'b'), (13, 9, 'c')],
		# Three collinear
		[(4, 1, 'a'), (8, 0, 'b'), (11, 0, 'c'), (14, 0, 'd')],
		[(4,10),(1,10), (12,6)],
		# Two collinear at the beginning
		[(15, 0), (0, 6), (10, 9), (14, 8), (4, 10), (2, 1), (1, 10), (14, 5), (11, 0)],
		# Lots of collinear
		[(5, 10), (3, 4), (5, 2), (0, 4), (2, 11), (1, 13), (12, 13), (12, 3), (13, 1)],
		[(1, 2), (5, 10), (9, 4), (13, 4), (4, 6), (8, 2), (11, 14), (7, 12), (3, 14)],
		[(14, 5), (7, 9), (7, 6), (15, 8), (9, 9), (8, 9), (7, 10), (9, 3), (6, 9)],
		[(6, 1), (4, 10), (6, 4), (15, 3), (10, 13), (11, 9), (9, 3), (15, 13), (1, 13)],
		# Vertical collinear
		[(0, 0), (3, 3), (15, 0), (15, 14), (0, 12), (2, 4), (12, 13), (11, 15), (15, 4)],
		# Both axis collinear
		[(12, 11), (13, 15), (9, 1), (9, 7), (2, 10), (9, 9), (4, 0), (14, 11), (9, 11)],
		# ERRORS:
		[(5, 20), (1, 20), (5, 9), (7, 1), (15, 15), (9, 5), (12, 4), (8, 12), (14, 20), (4, 12), (7, 12), (17, 12), (16, 13), (7, 11), (10, 14), (20, 13), (19, 1), (12, 1), (4, 0)],
		# 4 co-circular (at step 30-35)
		[(12, 4), (18, 16), (7, 12), (7, 16), (3, 7), (17, 14), (1, 20), (8, 7), (3, 18), (7, 15), (13, 1), (17, 0), (0, 3), (7, 16), (10, 11), (5, 13), (5, 13), (1, 9), (1, 11)],
		#
		#[(3, 6), (4, 7), (16, 14), (13, 5), (0, 6), (11, 0), (14, 5), (11, 13), (9, 12), (17, 7), (9, 1), (10, 17), (16, 20), (1, 1), (11, 2), (17, 0), (13, 5), (12, 13), (9, 2)],
		#[(0, 12), (5, 19), (7, 4), (10, 8), (10, 18), (18, 10), (14, 20), (9, 13), (18, 0), (10, 13), (3, 17), (18, 4), (11, 12), (16, 4), (19, 1), (14, 15), (2, 1), (9, 19), (3, 10)],
		# Circle plus below intersection
		#[(5.0, 0.0), (3.5355339059327378, 3.5355339059327373), (3.061616997868383e-16, 5.0), (-3.5355339059327373, 3.5355339059327378), (-5.0, 6.123233995736766e-16), (-3.5355339059327386, -3.5355339059327373), (-9.184850993605148e-16, -5.0), (3.535533905932737, -3.5355339059327386), (5.0, -1.2246467991473533e-15)],
		#[(5.0, 0.0), (3.5355339059327378, 3.5355339059327373), (3.061616997868383e-16, 5.0), (-3.5355339059327373, 3.5355339059327378), (-5.0, 6.123233995736766e-16)]
	]

	selected_runs.extend(degenerate_runs)
	# x = [ randint(0,15) for i in range(1,10)]
	# y = [ randint(0,15) for i in range(1,10)]
	# pts = zip(x,y,label)

	VoronoiDiagram.animate = animate
	# pts = selected_runs[-1]
	# v = VoronoiDiagram(pts,bounding_box=bbox)
	# exit(1)
	for pts in selected_runs:
		v = VoronoiDiagram(pts,bounding_box=bbox, step_by_step=False)
	# for i in range(1,50):
	# 	x = [ randint(0,20) for i in range(1,20)]
	# 	y = [ randint(0,20) for i in range(1,20)]
	# 	pts = zip(x,y)
	# 	v = VoronoiDiagram(pts,bounding_box=bbox, step_by_step=False)

	
